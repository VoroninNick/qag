$header_menu_user_wrapper = $('#header-menu-user-wrapper')
logged_in = $html.hasClass('logged_in')

$modal_windows_wrapper = $("#modal-windows-wrapper")

modalOpenClass = 'modal-open'
modalCloseTriggerClass = 'modal-close-trigger'

submitButtonClass = 'input-submit'

loginLinkClass = 'login'
logoutLinkClass = 'logout'

popupLinkClass = 'popup-link'

$login_link = $('#header-menu-user-wrapper a.popup-link.login')

registration_location = false
registration_event_id = false

delay_before_remove_popup = 2000

addProgressClassToButtonOnSubmit = true

submitButtonProgressClass = 'progress-bar-moving-bg'

sendMePasswordSubmitButtonClass = 'send-me-password-submit-button'
signUpSubmitButtonClass = 'sign-up-submit-button'
signInSubmitButtonClass = 'sign-in-submit-button'
resendMeConfirmationSubmitButtonClass = 'resend-me-confirmation-submit-button'
unlockMeSubmitButtonClass = 'unlock-me-submit-button'

logoutSubmitButtonClass = 'logout-submit-button'

subscribeSubmitButtonClass = 'subscribe-submit-button'
unsubscribeSubmitButtonClass = 'unsubscribe-submit-button'

eventCollectionItemClass = 'event-collection-item'

infinityScrollListClass = 'infinity-scroll-list'

event_register_request = false

popup_event_id = false

eventIAmSubscribedOnClass = 'event-i-am-subscribed-on'

jsTriggerClass = 'js-trigger'
modeClass = 'mode'
modeEditClass = 'mode-edit'
modeViewClass = 'mode-view';
editDataSubmitClass = 'edit';

edit_data_button_text = 'Відредагувати';
register_submit_button_text = 'Зареєструватись';
register_button_text = "Зареєструватись";
unregister_button_text = "Відмовитись";

$dashboard_content = $('#dashboard-content');

email_to_login = null;

page_before_dashboard = null;

has_modal_open_class = "has-modal-open";

global_event_ids_i_am_subscribed_on = null;

(function($){
    $.fn.init_form = function(){
        var $this = $(this)
        var $inputs = $this.find('div.input')
        var $phone_inputs = $inputs.filter('div.phone')
        var phone_inputs_length = $phone_inputs.length
        for(var i = 0; i< phone_inputs_length; i++){
            var $phone_input_wrap = $phone_inputs.eq(i)
            $phone_input_wrap.find('input').mask("+99 (999) 999 99 99")
        }

    }
})(jQuery)



<%
    def path( name, options = {} )
        Rails.application.routes.url_helpers.send("#{name}_path", options)
    end

    def js_path( name, options = {} )
        "\"#{path(name, options)}\""
    end

    def routes
        Rails.application.routes.url_helpers
    end
%>

<% I18n.locale = :uk %>

config = {
    routes: {
        new_user_session: <%= js_path(:new_user_session) %>,
        edit_user_registration: <%= js_path(:edit_user_registration) %>,
        my_events: <%= js_path(:root) %>,
        user_session_destroy_form: <%= js_path(:user_session_destroy_form) %>,
        call_back: <%= js_path(:call_back) %>

    }
}

function path(name){
    if(config.routes.hasOwnProperty(name)){
        return config.routes[name]
    }
    return false
}

function remove_with_delay(element_to_remove, delay){
    delay = delay || delay_before_remove_popup
    $elem = $(element_to_remove)
    $elem.remove()

}

function path_before_dashboard_or_home_path(){
    var cookie_object = {}
    var cookies_arr = []
    if(document.cookie != ''){
        console.log('document.cookie: ', document.cookie)
        cookies_arr = document.cookie.split(';')
        for(var i=0;i<cookies_arr.length;i++) {
            var cookie_str = cookies_arr[i].replace(/\s/g, '')
            var cookie_arr = cookie_str.split('=')
            var cookie_name = cookie_arr[0]
            var cookie_value = cookie_arr[1]
            cookie_object[cookie_name] = cookie_value
        }

    }

    var page_before_dashboard = cookie_object['page_before_dashboard']
    console.log("page_before_dashboard", page_before_dashboard ? page_before_dashboard : false)
    if(page_before_dashboard){
        return page_before_dashboard
    }
    else{
        return "/"
    }
}

var login_popup_link_click_handler = function(event){
    var $link = $(this)
    var url = $link.attr('href')

    if( $link.hasClass(loginLinkClass) || !logged_in) {
        if (!logged_in) {
            event.preventDefault()
            $.ajax({
                dataType: 'html',
                url: path('new_user_session'),
                type: 'GET',
                data: 'modal=true',
                success: function (data) {
                    var $modal = $(data)
                    showPopup.call($modal)
                }

            })
        }
    }
    else{
        event.preventDefault()
        $.ajax({
            dataType: 'html',
            url: path('user_session_destroy_form'),
            type: 'GET',
            data: 'modal=true',
            success: function (data) {
                var $modal = $(data)
                showPopup.call($modal)
            }

        })
    }

}

function login($html_source, data, success, event_ids_i_am_subscribed_on){
  //email_to_login = data.email
  logged_in = true
  $('.header-menu-user-link').append('<div id="header-menu-user-email">' + email_to_login + '</div>')
  $login_link.attr('href', path('edit_user_registration'))
  var $header_menu_user_dropdown = $(['<div id="header-menu-user-dropdown">',
    '<a href="',
    path('edit_user_registration'),
    '" class="header-menu-user-dropdown-link">dashboard</a>',
    '<a href="', path('my_events'), '" class="header-menu-user-dropdown-link">events i am subscribed on</a>',
    '<a href="', path('user_session_destroy_form'), '" class="popup-link header-menu-user-dropdown-link logout">log out</a>',
    '</div>'].join(''))

  var provided_success = success !== null && success !== undefined
  var successfullySignedIn = null
  if (!provided_success){
    successfullySignedIn = $html_source.find('#users_sessions-create-post').length > 0
  }
  else{
    successfullySignedIn = success
  }


  if(!successfullySignedIn){
    if ($html_source){
      setInterval(function(){
        $html_source.fadeOut(800, function(){
          $body.removeClass(has_modal_open_class)
        })
      }, 3000)
    }

    if (data){
      console.log("signed_in", data)

      var feedback_form_html = data.feedback_form_html
      if(feedback_form_html && feedback_form_html.length){
        $(".feedback-form-wrap").html(feedback_form_html)
      }
    }



  }

  $header_menu_user_dropdown.appendTo($header_menu_user_wrapper)

  global_event_ids_i_am_subscribed_on = event_ids_i_am_subscribed_on

  if (!event_ids_i_am_subscribed_on && data){
    event_ids_i_am_subscribed_on = data['events_i_am_subscribed_on']
  }

  if (event_ids_i_am_subscribed_on) {
    changeRegistrationButtonForEvents({
      registered: true,
      button_text: unregister_button_text,
      events: event_ids_i_am_subscribed_on
    })
  }

  if ($html_source){
    var $devise_event_subscriptions_form_wrap = $html_source.find('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
    if ($devise_event_subscriptions_form_wrap.length > 0) {
      $form.addClass(modeViewClass)
    }
  }
}

function logout($popup, data){
  Cookies.remove("user_info")
  $popup.removeClass(modalOpenClass)
  remove_with_delay($popup)
  logged_in = false
  $header_menu_user_wrapper.find('#header-menu-user-dropdown').remove()
  $('div#header-menu-user-email').remove()

  default_handler = false

  var data_events_i_am_subscribed_on = data['events_i_am_subscribed_on']

  console.log('data_events_i_am_subscribed_on: ', data_events_i_am_subscribed_on)

  changeRegistrationButtonForEvents({
    registered: false,
    button_text: data['subscribe_button_text'],
    events: data_events_i_am_subscribed_on
  })
  var current_path = window.location.pathname
  //var dashboard = current_path.match(/^(\/[a-z]{2})?\/my/gi) != null
  var dashboard = $("#body").hasClass("dashboard")
  console.log('dashboard: ', dashboard)
  if(dashboard){
    window.location = path_before_dashboard_or_home_path()
  }
}

var call_back_popup_link_click_handler = function(event){
  var $link = $(this)
  var url = $link.attr('href')


  event.preventDefault()
  $.ajax({
    dataType: 'html',
    url: path('call_back'),
    type: 'GET',
    data: 'modal=true',
    success: function (data) {
      var $modal = $(data)
      $modal.init_form()
      showPopup.call($modal)
    }

  })




}

function init_login(){
  var user_info =  Cookies.getJSON("user_info")
  if (user_info){
    email_to_login = user_info.email
    var event_ids = user_info.event_ids_i_am_subscribed_on
    //global_event_ids_i_am_subscribed_on = event_ids

    login(null, null, true, event_ids)
  }
  else{
    $.ajax({
      url: "/short_user_info",
      dataType: "json",
      success: function (data) {
        email_to_login = data.email
        var user_info = data
        //global_event_ids_i_am_subscribed_on = data.event_ids_i_am_subscribed_on

        Cookies.set("user_info", user_info)
        login(null, null, true)
      }
    })
  }
}

init_login()

$("#fixed-call-button").on("click", call_back_popup_link_click_handler)

$header_menu_user_wrapper.on('click', '.popup-link', login_popup_link_click_handler)
$('.please-login-to-leave-feedback').on('click', '.popup-link', login_popup_link_click_handler)



$modal_windows_wrapper.add($dashboard_content).on('click focusin focusout field_valid', ['label.' + modalCloseTriggerClass, 'input.' + submitButtonClass, '.input input', 'a.' + popupLinkClass, '.'+jsTriggerClass].join(','), function(event) {
    console.log("this: ", this, "; arguments: ", arguments)
    var $this = $(this)
    var $popup = $this.closest('.popup')
    var $form = $this.closest('form')

    if (event.type == 'focusin') {
        var $parent = $this.parent()
        if ($parent.hasClass('input')) {
            $parent.addClass('focus')
        }
    }

    if (event.type == 'focusout') {
        var $parent = $this.parent()
        if ($parent.hasClass('input')) {
            $parent.removeClass('focus')
        }
    }

    else if (event.type == 'click') {

        if ($this.hasClass(jsTriggerClass)) {
            var $js_trigger = $this

            event.preventDefault()

            if($js_trigger.hasClass(modeClass)){
                var $devise_form_wrap = $js_trigger.closest('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                if($devise_form_wrap.length > 0){
                    if($form.hasClass(modeViewClass)){
                        $form.removeClass(modeViewClass)
                        $form.addClass(modeEditClass)
                        var $subscribe_submit_button = $devise_form_wrap.find('.'+subscribeSubmitButtonClass)
                        $subscribe_submit_button.addClass([jsTriggerClass, editDataSubmitClass].join(' '))
                        $subscribe_submit_button.val(edit_data_button_text)

                        var $form = $devise_form_wrap.find('form')
                        $form.validate_form()
                    }

                }
            }
            else if($js_trigger.hasClass('quit-dashboard')){
                window.location = path_before_dashboard_or_home_path()
            }
            else{
                var $devise_form_wrap = $js_trigger.closest('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                if($devise_form_wrap.length > 0){
                    if($form.hasClass(modeEditClass) && $js_trigger.hasClass(editDataSubmitClass)){
                        var $form = $devise_form_wrap.find('form');
                        valid_form = $form.validate_form()
                        if(valid_form) {
                            $form.removeClass(modeEditClass).addClass(modeViewClass)
                            $js_trigger.removeClass([jsTriggerClass, editDataSubmitClass].join(' '))
                            $js_trigger.val(register_submit_button_text)
                        }
                    }
                }
            }
        }

        else {

            if ($this.hasClass(modalCloseTriggerClass)) {
                $popup.removeClass(modalOpenClass)
                remove_with_delay($popup)
                $body.removeClass(has_modal_open_class)

                registration_event_id = false
                registration_location = false
                registration_event_id = false
            }
            else if ($this.hasClass(submitButtonClass)) {
                event.preventDefault()

                var $submit_button = $this

                var $form = $this.closest('form')
                var $devise_form_wrap = $('.devise-form-wrap')
                var $errors = $devise_form_wrap.find('> div.errors')
                var form_data = $form.serialize()
                var url = $form.attr('action')
                var method = $form.attr('method')

                form_data += "&modal=true"

                if (registration_location) {
                    form_data += "&registration_location=" + registration_location
                }

                if (registration_event_id) {
                    form_data += "&registration_event_id=" + registration_event_id
                }

                if ($submit_button.hasClass(signInSubmitButtonClass) || $submit_button.hasClass(logoutSubmitButtonClass)) {
                    var $events = $('.' + eventCollectionItemClass)

                    if($submit_button.hasClass(signInSubmitButtonClass)){
                        email_to_login = $form.find('input.email').val()
                    }

                    else if ($submit_button.hasClass(logoutSubmitButtonClass)) {
                        $events = $events.filter('.' + eventIAmSubscribedOnClass)
                    }
                    var events_count = $events.length
                    var event_ids = []
                    for (var i = 0; i < events_count; i++) {
                        event_ids[i] = +$events.eq(i).attr('data-event-id')
                    }
                    form_data += "&loaded_events=" + event_ids.join(',')
                }

                valid_form = true

                valid_form = $form.validate_form()

                if (valid_form) {
                    var check_in_progress = addProgressClassToButtonOnSubmit ? $submit_button.hasClass(submitButtonProgressClass) : false
                    if(addProgressClassToButtonOnSubmit) {
                        $submit_button.addClass(submitButtonProgressClass);
                    }

                    if(!check_in_progress){
                    $.ajax({
                        url: url,
                        type: method,
                        data: form_data,
                        dataType: 'json',
                        complete: function (jqXHR, textStatus) {
                            if(addProgressClassToButtonOnSubmit) {
                                $submit_button.removeClass(submitButtonProgressClass)
                            }
                            var response_text = jqXHR.responseText
                            var data = {}, $html_source
                            if (typeof response_text == 'string' && response_text.length > 0) {
                                try {
                                    data = $.parseJSON(response_text)
                                    $html_source = $(data['html'])
                                }
                                catch (err) {
                                    data = {}
                                    $html_source = $($.parseHTML(response_text))
                                }
                            }

                            console.log('data: ', data)

                            var errors = {}
                            if (data.hasOwnProperty('errors')) {
                                errors = data['errors']
                            }

                            if (data.hasOwnProperty('error')) {
                                errors['form'] = data['error']
                            }

                            DATA = data

                            if (data.hasOwnProperty('html')) {
                                html_source = data['html']
                                $html_source = $(html_source)

                            }

                            var default_handler = true

                            if (textStatus == 'success') {

                                console.log('data: ', data)

                                if ($submit_button.hasClass('login') ) {
                                    if(!logged_in) {
                                        login($html_source, data)
                                    }
                                }
                                else if ($submit_button.hasClass('logout')) {
                                    logout($popup, data)
                                }
                                else if ($submit_button.hasClass(signUpSubmitButtonClass)) {
                                    var errors_html = ""
                                    for(var k in errors){
                                        errors_html += "<div>" + errors[k] + "</div>"
                                    }
                                    $errors.html(errors_html)
                                    if (errors.hasOwnProperty('email')) {
                                        $form.find('div.input.email').manipulateClasses(['error', 'taken'], ['valid'])
                                        default_handler = false
                                    }
                                    else {
                                        default_handler = true
                                    }
                                }
                                else if ($submit_button.hasClass(subscribeSubmitButtonClass)) {
                                    changeRegistrationButtonForEvents({
                                        registered: true,
                                        button_text: data['decline_button_text'],
                                        events: [{
                                            event_id: popup_event_id,
                                            decline_button_link: data['decline_button_link']
                                        }]
                                    })
                                }
                                else if ($submit_button.hasClass(unsubscribeSubmitButtonClass)) {
                                    changeRegistrationButtonForEvents({
                                        registered: true,
                                        button_text: data['subscribe_button_text'],
                                        events: [{
                                            event_id: popup_event_id,
                                            decline_button_link: data['subscribe_button_link']
                                        }]
                                    })
                                    popup_event_id = false
                                }


                                if (default_handler) {
                                    if (Object.keys(errors).length == 0) {
                                        console.log('errors: ', errors)
                                        $popup.removeClass(modalOpenClass)
                                        remove_with_delay($popup)
                                        $popup.init_form()
                                        showPopup.call($html_source)
                                    }
                                    else {

                                    }
                                }

                                // ======================================================
                                // ------------------------------------------------------
                                // after default handler
                                // ------------------------------------------------------
                                // ======================================================
                                if ($submit_button.hasClass('login')) {
                                    var $devise_event_subscriptions_form_wrap = $html_source.find('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                                    if ($devise_event_subscriptions_form_wrap.length > 0) {
                                        $form.addClass(modeViewClass)
                                        var $empty_fields = $devise_event_subscriptions_form_wrap.find('.input.empty')
                                        $empty_fields.first().find('input').first().focus()
                                    }
                                }
                            }
                            else {
                                if ($submit_button.hasClass('login')) {
                                    var error_keys = Object.keys(errors)
                                    var error_keys_length = error_keys.length
                                    if (error_keys_length > 0) {
                                        $errors.children().remove()
                                        for (var j = 0; j < error_keys_length; j++) {
                                            var error_key = error_keys[j]
                                            var error_text = errors[error_key]
                                            var $error_container = $(['<div class="error">', error_text, '</div>'].join(''))
                                            $errors.append($error_container)
                                        }
                                    }
                                    else {
                                    }
                                }
                                else if ($submit_button.hasClass(sendMePasswordSubmitButtonClass)) {
                                    console.log("sendMePasswordSubmitButtonClass")
                                    if(false) {
                                        var $error_container = $(['<div class="error">', data, '</div>'].join(''))

                                        $errors.html($error_container)
                                    }
                                    else{
                                        var $modal = $html_source
                                        $popup.removeClass(modalOpenClass)
                                        PUBLIC_MODAL = $modal
                                        remove_with_delay($popup)
                                        showPopup.call($modal)
                                        $modal.init_form()
                                    }
                                }
                                else if($submit_button.hasClass(signUpSubmitButtonClass)){
                                    var errors_html = ""
                                    for(var k in errors){
                                        errors_html += "<div>" + errors[k] + "</div>"
                                    }
                                    $errors.html(errors_html)
                                }
                            }
                        }
                    })}
                }
            }
            else if ($this.hasClass(popupLinkClass)) {
                event.preventDefault()
                var $popup_link = $this
                var url = $popup_link.attr('href')
                $.ajax({
                    type: 'get',
                    url: url,
                    data: 'modal=true',
                    dataType: 'text',
                    complete: function (jqXHR, textStatus) {
                        var response_text = jqXHR.responseText
                        var data, $html_source;
                        try {
                            data = $.parseJSON(response_text)
                            $html_source = $(data['html'])
                        }
                        catch (err) {
                            data = {}
                            $html_source = $.parseHTML(response_text)
                            $html_source = $($html_source)

                        }

                        HTML_SOURCE = $html_source

                        if (textStatus == 'success') {
                            var $modal = $html_source
                            $popup.removeClass(modalOpenClass)
                            PUBLIC_MODAL = $modal
                            remove_with_delay($popup)

                            showPopup.call($modal)


                            $modal.init_form()
                        }
                        else if ($html_source) {
                            var $modal = $html_source
                            $popup.removeClass(modalOpenClass)
                            PUBLIC_MODAL = $modal
                            remove_with_delay($popup)

                            showPopup.call($modal)
                            $modal.init_form()
                        }
                    }

                })
            }
        }
    }
})


$home_featured_event_info_slides_row_ul = $('#home-featured-event-info-slides-row-ul')
$event_collections = $('.events-collection, #event-item-page-event-info-part-details')

$event_collections.on('click', 'a.register-button-a', function(event){
    event.preventDefault()
    var $link = $(this)
    var url = $link.attr('href')
    var $event = $link.closest('.'+eventCollectionItemClass)
    var event_id = + $event.attr('data-event-id')
    $.ajax({
        type: 'GET',
        url: url,
        dataType: 'json',
        data: 'modal=true',
        complete: function(jqXHR, textStatus){
            // ================================================
            // ------------------------------------------------
            // initialize data
            // ------------------------------------------------
            // ================================================
            var response_text = jqXHR.responseText
            var data, $html_source;

            try {
                data = $.parseJSON(response_text)
                $html_source = $(data['html'])
            }
            catch(err){
                data = {}
                $html_source = $.parseHTML(response_text)
                $html_source = $($html_source)

            }

            var errors = {}
            if(data.hasOwnProperty('errors')){
                errors = data['errors']
            }

            if(data.hasOwnProperty('error')){
                errors['form'] = data['error']
            }

            DATA = data

            if($html_source){

                if(data['controller'] == 'users/event_subscriptions' && data['action'] == 'new'){
                    event_register_request = true
                }
                var $modal = $html_source
                showPopup.call($modal)
                registration_location = window.location.pathname
                registration_event_id = event_id
                popup_event_id = event_id

                var $devise_event_subscriptions_form_wrap = $html_source.find('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                var $form = $devise_event_subscriptions_form_wrap.find('form')
                if($devise_event_subscriptions_form_wrap.length > 0){
                    $form.addClass(modeViewClass)
                    var $empty_fields = $devise_event_subscriptions_form_wrap.find('.input.empty')
                    $empty_fields.first().find('input').first().focus()
                }

                $modal.init_form()
            }

            else{
                console.log('error')
                console.log('text_status: ', textStatus)
            }
        }
    })
})

$infinity_scroll_list = $('.infinity-scroll-list')
var infinity_scroll_list_count = $infinity_scroll_list.length
var infinity_scroll_base_url = $infinity_scroll_list.attr("data-base-url")
var load_started = false

if(infinity_scroll_list_count > 0) {
    var current_pagination_page = 1
    var max_pagination_page = +$('.pagination a:not(.next_page):last').text()

    var $ajax_list_preloader_wrap = $(".ajax-list-preloader-wrap")
    if (max_pagination_page > current_pagination_page){

      if(!$ajax_list_preloader_wrap.hasClass("show")){
        $ajax_list_preloader_wrap.addClass("show")
      }

    }
    if(max_pagination_page > current_pagination_page) {
        var url = window.location.pathname

        $window.on('scroll', function (event) {

            if(!load_started && current_pagination_page < max_pagination_page && nearBottomOfPage()) {
                load_started = true
                var required_page = current_pagination_page + 1
                current_pagination_page++
                url = "/ajax" + infinity_scroll_base_url + "/page/" + required_page + ".json"
                var str = 1
                $.ajax({
                    url: url,
                    type: 'get',
                    data: {},
                    dataType: 'json',
                    complete: function (jqXHR, textStatus) {
                        var last_page_received = current_pagination_page == max_pagination_page

                        var response_text = jqXHR.responseText
                        var data = $.parseJSON(response_text)
                        var html_source = data['html']
                        if(textStatus == 'success'){
                            var $html_source = $(html_source)
                            var $event_list_expired_image_carousels = $html_source.find('.'+event_list_item_images_carousel_class)
                            $event_list_expired_image_carousels.init_images_carousel()
                            $infinity_scroll_list.append($html_source)
                        }

                      if(last_page_received){
                        $ajax_list_preloader_wrap.removeClass("show")
                      }

                        load_started = false


                    }
                })
            }
        })
    }
}

function changeRegistrationButtonForEvents(options){
    var defaults = { events_attribute: "events", registered: true, decline_button_link: false, button_text: false, events: [] }
    options = Object.merge(defaults, options )
    if (!options.events){
      return
    }
    var events_attribute = options['events_attribute']
    var events = options[events_attribute]
    var events_count = events.length
    if( options.button_text && events_count > 0){
        var event_selector_array = []
        var event_selector_string;
        for(var i=0; i< events_count; i++){
            var event_info = events[i]

            var event_id = null;
            if (typeof event_info == "number" ){
              event_id = event_info
            }
            else {
              event_id = event_info['event_id']
            }


            event_selector_array[i] = '[data-event-id='+event_id+']'
        }
        event_selector_string = event_selector_array.join(',')

        var $all_events
        $all_events = $('.'+eventCollectionItemClass + ", [id='event-content-and-info-row']")

        var $matched_events = $all_events.filter(event_selector_string)
        console.log('options.registered', options.registered)
        if(options.registered){
           $matched_events.manipulateClasses([eventIAmSubscribedOnClass], [])
        }
        else{
            $matched_events.manipulateClasses([], [eventIAmSubscribedOnClass])
        }

        console.log('event_selector_string: ', event_selector_string)

        console.log('matched_events_count', $matched_events.length)
        var matched_events_count = $matched_events.length
        for(var k = 0; k< matched_events_count; k++ ){
            var event_info = options.events[k]
            var event_button_url = ''
            if(options.registered){
                event_button_url = event_info['decline_button_link']
            }
            else{
                event_button_url = event_info['subscribe_button_link']
            }
            var $event = $matched_events.eq(k)
            var $register_button = $event.find('div.register-button')
            var $register_button_link = $register_button.find('a.register-button-a')
            $register_button_link.attr('href', event_button_url)
            if(options.registered){
                $register_button.manipulateClasses(['decline'],[])
            }
            else{
                $register_button.manipulateClasses([], ['decline'])
            }

            var $registration_text_tag = $register_button.find('.registration-text')

            console.log('$registration_text_tag: ', $registration_text_tag)
            console.log('button_text: ', options.button_text)

            public_registration_text_tag = $registration_text_tag

            $registration_text_tag.text(options.button_text)
        }
    }

}

function nearBottomOfPage() {
    return scrollDistanceFromBottom() < 150;
}

function scrollDistanceFromBottom(argument) {
    return pageHeight() - (window.pageYOffset + self.innerHeight);
}

function pageHeight() {
    return Math.max(document.body.scrollHeight, document.body.offsetHeight);
}

// ======================================================
// ------------------------------------------------------
// home page featured events carousel
// ------------------------------------------------------
// ======================================================

window.onbeforeunload = function(e) {
    var current_path = window.location.pathname
    //var dashboard = current_path.match(/^(\/[a-z]{2})?\/my/gi) != null
    var dashboard = $("#body").hasClass("dashboard")
    if(!dashboard){
            document.cookie = ['page_before_dashboard', window.location.pathname].join('=')

    }

};

last_timeout_id = false

var mouse_in_event = 'mouseover'
mouse_in_event = 'mouseenter'
var mouse_out_event = 'mouseout'
mouse_out_event = 'mouseleave'
$('#events-list').on([mouse_out_event, mouse_in_event].join(' '), 'div.events-list-event, div.articles-list-article', function(event){

    var $event = $(this)

    if (event.type == mouse_out_event) {
        if (last_timeout_id) {
            console.log(mouse_out_event + ': event_id: ', $event.attr('data-event-id'))
            clearTimeout(last_timeout_id)
            $event.removeClass('hover-delay-end')
        }
    }
    else if (event.type == mouse_in_event) {
        last_timeout_id = setTimeout(function () {
            console.log(mouse_in_event + ': event_id: ', $event.attr('data-event-id'))
            $event.addClass('hover-delay-end')
        }, 800)
    }
})

function hideMenu(){
    $('#menu-focus-flag:checked').prop('checked', false)
}

$window.on('scroll', hideMenu)
$wrap.on('click', hideMenu)

$fixed_header_top_container = $('#fixed-header-top-container')
fixed_header_top_container_visible_class = 'visible'

var is_home_page = $html.hasClass('controller-home action-index')

if(!is_home_page) {
    $window.on('mousewheel', function (e) {
        var scroll_up = e.originalEvent.wheelDelta / 120 > 0
        var scroll_down = !scroll_up
        var current_scoll_at_top = $window.scrollTop() <= $fixed_header_top_container.height()
        console.log("current_scoll_at_top: ", current_scoll_at_top)
        if (!current_scoll_at_top && window.innerWidth > 640) {
            $fixed_header_top_container.addClass(fixed_header_top_container_visible_class)
        }
        else {
            $fixed_header_top_container.removeClass(fixed_header_top_container_visible_class)
        }
    })
}
$(document).on('ready',function() {
    var $fixed_on_scroll_containers = $('.fixed-on-scroll')
    if ($fixed_on_scroll_containers.length > 0) {
        console.log('add scroll handler')
        $window.on('scroll', function (e) {
            var scroll_top = $window.scrollTop()

            for(var i = 0; i < $fixed_on_scroll_containers.length; i++) {
                var $container = $fixed_on_scroll_containers.eq(i)
                var $parent = $container.parent()
                var parent_top = $parent.offset().top
                var parent_height = $parent.height()
                var parent_bottom = parent_top + parent_height
                console.log('scroll_top: ', scroll_top, 'parent_top: ', parent_top, 'parent_bottom: ', parent_bottom, 'result: ', (scroll_top >= parent_top && scroll_top <= parent_bottom))
                if (scroll_top >= parent_top && scroll_top <= parent_bottom) {
                    $container.addClass('fixed')
                    console.log('add class fixed')
                }
                else {
                    $container.removeClass('fixed')
                    console.log('remove class fixed')
                }
            }
        })
    }
})

$(document).on("keypress", "input", function(e){
    var prevent = false
    if((e.charCode >= 48 && e.charCode <= 57)   ) {
        var $input = $(this)
        var $input_wrap = $input.closest("div.input")
        var validation_options = $input_wrap.attr("data-validate")
        if (validation_options && validation_options.length) {
            validation_options = validation_options.split(" ")
            if (validation_options.indexOf("first_name") >= 0 || validation_options.indexOf("last_name") >= 0 ) {
                prevent = true
            }
        }
    }

    console.log(e.type, e)

    if(prevent){
        e.preventDefault()
    }
})
