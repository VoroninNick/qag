$header_menu_user_wrapper = $('#header-menu-user-wrapper')
logged_in = $html.hasClass('logged_in')

$modal_windows_wrapper = $("#modal-windows-wrapper")

modalOpenClass = 'modal-open'
modalCloseTriggerClass = 'modal-close-trigger'

submitButtonClass = 'input-submit'

loginLinkClass = 'login'
logoutLinkClass = 'logout'

popupLinkClass = 'popup-link'

$login_link = $('#header-menu-user-wrapper a.popup-link.login')

registration_location = false
registration_event_id = false

delay_before_remove_popup = 2000

addProgressClassToButtonOnSubmit = false

submitButtonProgressClass = 'progress-bar-moving-bg'

sendMePasswordSubmitButtonClass = 'send-me-password-submit-button'
signUpSubmitButtonClass = 'sign-up-submit-button'
signInSubmitButtonClass = 'sign-in-submit-button'
resendMeConfirmationSubmitButtonClass = 'resend-me-confirmation-submit-button'
unlockMeSubmitButtonClass = 'unlock-me-submit-button'

logoutSubmitButtonClass = 'logout-submit-button'

subscribeSubmitButtonClass = 'subscribe-submit-button'
unsubscribeSubmitButtonClass = 'unsubscribe-submit-button'

eventCollectionItemClass = 'event-collection-item'

infinityScrollListClass = 'infinity-scroll-list'

event_register_request = false

popup_event_id = false

eventIAmSubscribedOnClass = 'event-i-am-subscribed-on'

jsTriggerClass = 'js-trigger'
modeClass = 'mode'
modeEditClass = 'mode-edit'
modeViewClass = 'mode-view';
editDataSubmitClass = 'edit';



edit_data_button_text = 'Відредагувати';
register_submit_button_text = 'Зареєструватись';
register_button_text = "Зареєструватись";
unregister_button_text = "Відмовитись";

$dashboard_content = $('#dashboard-content');

email_to_login = null;

page_before_dashboard = null;






(function($){
    $.fn.init_form = function(){
        var $this = $(this)
        var $inputs = $this.find('div.input')
        var $phone_inputs = $inputs.filter('div.phone')
        var phone_inputs_length = $phone_inputs.length
        for(var i = 0; i< phone_inputs_length; i++){
            var $phone_input_wrap = $phone_inputs.eq(i)
            $phone_input_wrap.find('input').mask("+99 (999) 999 99 99")
        }

    }
})(jQuery)



<%
    def path( name, options = {} )
        Rails.application.routes.url_helpers.send("#{name}_path", options)
    end

    def js_path( name, options = {} )
        "\"#{path(name, options)}\""
    end

    def routes
        Rails.application.routes.url_helpers
    end
%>

<% I18n.locale = :uk %>

config = {
    routes: {
        new_user_session: <%= js_path(:new_user_session, locale: I18n.locale) %>,
        edit_user_registration: <%= js_path(:edit_user_registration, locale: I18n.locale) %>,
        my_events: <%= js_path(:root, locale: I18n.locale) %>,
        user_session_destroy_form: <%= js_path(:user_session_destroy_form, locale: I18n.locale) %>

    }
}

function path(name){
    if(config.routes.hasOwnProperty(name)){
        return config.routes[name]
    }
    return false
}

function remove_with_delay(element_to_remove, delay){
    delay = delay || delay_before_remove_popup
    $elem = $(element_to_remove)
    $elem.remove()
//    if($elem.length > 0){
//        setTimeout(function(){
//            $elem.remove()
//        }, delay);
//    }

}

function path_before_dashboard_or_home_path(){
    var cookie_object = {}
    var cookies_arr = []
    if(document.cookie != ''){
        console.log('document.cookie: ', document.cookie)
        //cookie_object = $.parseJSON(document.cookie)
        cookies_arr = document.cookie.split(';')
        for(var i=0;i<cookies_arr.length;i++) {
            var cookie_str = cookies_arr[i].replace(/\s/g, '')
            var cookie_arr = cookie_str.split('=')
            var cookie_name = cookie_arr[0]
            var cookie_value = cookie_arr[1]
            cookie_object[cookie_name] = cookie_value
        }

    }


    var page_before_dashboard = cookie_object['page_before_dashboard']
    console.log("page_before_dashboard", page_before_dashboard ? page_before_dashboard : false)
    if(page_before_dashboard){
        return page_before_dashboard
    }
    else{
        return "/"
    }
}

$header_menu_user_wrapper.on('click', '.popup-link', function(event){
    var $link = $(this)
    var url = $link.attr('href')



    if( $link.hasClass(loginLinkClass) || !logged_in) {
        if (!logged_in) {
            event.preventDefault()
            $.ajax({
                dataType: 'html',
                url: path('new_user_session'),
                type: 'GET',
                data: 'modal=true',
                success: function (data) {
                    var $modal = $(data)
                    $modal.addClass(modalOpenClass)
                    $modal_windows_wrapper.append($modal)
                }

            })
        }
        //else{

        //}
    }
    //else if($link.hasClass('dashboard-menu-another-link-li-a logout')){

    //}
    else{
        event.preventDefault()
        $.ajax({
            dataType: 'html',
            url: path('user_session_destroy_form'),
            type: 'GET',
            data: 'modal=true',
            success: function (data) {
                var $modal = $(data)
                $modal.addClass(modalOpenClass)
                $modal_windows_wrapper.append($modal)
            }

        })
    }


})



$modal_windows_wrapper.add($dashboard_content).on('click focusin focusout field_valid', ['label.' + modalCloseTriggerClass, 'input.' + submitButtonClass, '.input input', 'a.' + popupLinkClass, '.'+jsTriggerClass].join(','), function(event) {
    var $this = $(this)
    var $popup = $this.closest('.popup')
    var $form = $this.closest('form')

    //var $a = $this.closest('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')

    if (event.type == 'focusin') {
        var $parent = $this.parent()
        if ($parent.hasClass('input')) {
            $parent.addClass('focus')
        }
    }

    if (event.type == 'focusout') {
        var $parent = $this.parent()
        if ($parent.hasClass('input')) {
            $parent.removeClass('focus')
        }
    }

    else if (event.type == 'click') {

        if ($this.hasClass(jsTriggerClass)) {
            var $js_trigger = $this

            event.preventDefault()

            if($js_trigger.hasClass(modeClass)){
                var $devise_form_wrap = $js_trigger.closest('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                if($devise_form_wrap.length > 0){
                    if($form.hasClass(modeViewClass)){
                        $form.removeClass(modeViewClass)
                        $form.addClass(modeEditClass)
                        var $subscribe_submit_button = $devise_form_wrap.find('.'+subscribeSubmitButtonClass)
                        $subscribe_submit_button.addClass([jsTriggerClass, editDataSubmitClass].join(' '))
                        $subscribe_submit_button.val(edit_data_button_text)

                        var $form = $devise_form_wrap.find('form')
                        $form.validate_form()
                    }


                }
            }
            else if($js_trigger.hasClass('quit-dashboard')){
                window.location = path_before_dashboard_or_home_path()
            }
            else{
                var $devise_form_wrap = $js_trigger.closest('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                if($devise_form_wrap.length > 0){
                    if($form.hasClass(modeEditClass) && $js_trigger.hasClass(editDataSubmitClass)){
                        var $form = $devise_form_wrap.find('form');
                        valid_form = $form.validate_form()
                        if(valid_form) {
                            $form.removeClass(modeEditClass).addClass(modeViewClass)
                            $js_trigger.removeClass([jsTriggerClass, editDataSubmitClass].join(' '))
                            $js_trigger.val(register_submit_button_text)
                        }
                    }
                }
            }
        }

        else {

            if ($this.hasClass(modalCloseTriggerClass)) {
                $popup.removeClass(modalOpenClass)
                remove_with_delay($popup)

                registration_event_id = false
                registration_location = false
                registration_event_id = false
            }
            else if ($this.hasClass(submitButtonClass)) {
                event.preventDefault()

                var $submit_button = $this

                var $form = $this.closest('form')
                var $devise_form_wrap = $('.devise-form-wrap')
                var $errors = $devise_form_wrap.find('> div.errors')
                var form_data = $form.serialize()
                var url = $form.attr('action')
                var method = $form.attr('method')

                form_data += "&modal=true"

                if (registration_location) {
                    form_data += "&registration_location=" + registration_location
                }

                if (registration_event_id) {
                    form_data += "&registration_event_id=" + registration_event_id
                }

                if ($submit_button.hasClass(signInSubmitButtonClass) || $submit_button.hasClass(logoutSubmitButtonClass)) {
                    var $events = $('.' + eventCollectionItemClass)

                    if($submit_button.hasClass(signInSubmitButtonClass)){
                        email_to_login = $form.find('input.email').val()
                    }

                    else if ($submit_button.hasClass(logoutSubmitButtonClass)) {
                        $events = $events.filter('.' + eventIAmSubscribedOnClass)
                    }
                    var events_count = $events.length
                    var event_ids = []
                    for (var i = 0; i < events_count; i++) {
                        event_ids[i] = +$events.eq(i).attr('data-event-id')
                    }
                    form_data += "&loaded_events=" + event_ids.join(',')


                }


                valid_form = true

                //if($submit_button.hasClass(signUpSubmitButtonClass)){

                //}
                //else if($submit_button.hasClass(signInSubmitButtonClass)){

                //}
                //else if($submit_button.hasClass())

                valid_form = $form.validate_form()


                if (valid_form) {

                    if(addProgressClassToButtonOnSubmit) {
                        $submit_button.addClass(submitButtonProgressClass);
                    }

                    $.ajax({
                        url: url,
                        type: method,
                        data: form_data,
                        dataType: 'json',
                        complete: function (jqXHR, textStatus) {
                            //console.log('this:', $this)
                            if(addProgressClassToButtonOnSubmit) {
                                $submit_button.removeClass(submitButtonProgressClass)
                            }
                            var response_text = jqXHR.responseText
                            //console.log('before parse json. response_text: ')
                            var data = {}, $html_source
                            if (typeof response_text == 'string' && response_text.length > 0) {
                                try {
                                    data = $.parseJSON(response_text)
                                    $html_source = $(data['html'])
                                }
                                catch (err) {
                                    data = {}
                                    $html_source = $($.parseHTML(response_text))
                                }
                            }

                            //console.log('after parse json')


                            console.log('data: ', data)

                            var errors = {}
                            if (data.hasOwnProperty('errors')) {
                                errors = data['errors']
                            }

                            if (data.hasOwnProperty('error')) {
                                errors['form'] = data['error']
                            }

                            DATA = data

                            //var html_source = ""

                            if (data.hasOwnProperty('html')) {
                                html_source = data['html']
                                $html_source = $(html_source)

                            }


                            //var $data = $(data)

                            var default_handler = true


                            if (textStatus == 'success') {
                                //var $data = $(data)

                                console.log('data: ', data)

                                if ($submit_button.hasClass('login') ) {

                                    if(!logged_in) {
                                        //$popup.removeClass(modalOpenClass)
                                        //remove_with_delay($popup)
                                        logged_in = true
                                        $('.header-menu-user-link').append('<div id="header-menu-user-email">' + email_to_login + '</div>')
                                        $login_link.attr('href', path('edit_user_registration'))
                                        var $header_menu_user_dropdown = $(['<div id="header-menu-user-dropdown">',
                                            '<a href="',
                                            path('edit_user_registration'),
                                            '" class="header-menu-user-dropdown-link">dashboard</a>',
                                            '<a href="', path('my_events'), '" class="header-menu-user-dropdown-link">events i am subscribed on</a>',
                                            '<a href="', path('user_session_destroy_form'), '" class="popup-link header-menu-user-dropdown-link logout">log out</a>',
                                            '</div>'].join(''))


                                        $header_menu_user_dropdown.appendTo($header_menu_user_wrapper)

                                        //$()

                                        //event['events_i_am_subscribed_on']

                                        changeRegistrationButtonForEvents({
                                            registered: true,
                                            button_text: data['decline_button_text'],
                                            events: data['events_i_am_subscribed_on']
                                        })

                                        //default_handler = false

                                        var $devise_event_subscriptions_form_wrap = $html_source.find('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                                        if ($devise_event_subscriptions_form_wrap.length > 0) {
                                            $form.addClass(modeViewClass)

                                        }
                                    }
                                }
                                else if ($submit_button.hasClass('logout')) {
                                    $popup.removeClass(modalOpenClass)
                                    remove_with_delay($popup)
                                    logged_in = false
                                    $header_menu_user_wrapper.find('#header-menu-user-dropdown').remove()
                                    $('div#header-menu-user-email').remove()

                                    default_handler = false


                                    var data_events_i_am_subscribed_on = data['events_i_am_subscribed_on']

                                    console.log('data_events_i_am_subscribed_on: ', data_events_i_am_subscribed_on)


                                    changeRegistrationButtonForEvents({
                                        registered: false,
                                        button_text: data['subscribe_button_text'],
                                        events: data_events_i_am_subscribed_on
                                    })

                                    var current_path = window.location.pathname
                                    var dashboard = current_path.match(/^(\/[a-z]{2})?\/my/gi) != null
                                    console.log('dashboard: ', dashboard)
                                    if(dashboard){
                                        window.location = path_before_dashboard_or_home_path()
                                    }
                                }
                                else if ($submit_button.hasClass(signUpSubmitButtonClass)) {

                                    if (errors.hasOwnProperty('email') && errors['email'] == 'Email already taken') {
                                        $form.find('div.input.email').manipulateClasses(['error', 'taken'], ['valid'])
                                        default_handler = false
                                    }
                                    else {
                                        default_handler = true
                                        //alert('ok')
                                    }
                                }

                                else if ($submit_button.hasClass(subscribeSubmitButtonClass)) {
                                    //alert(registration_event_id)
                                    // abcdef
                                    changeRegistrationButtonForEvents({
                                        registered: true,
                                        button_text: data['decline_button_text'],
                                        events: [{
                                            event_id: popup_event_id,
                                            decline_button_link: data['decline_button_link']
                                        }]
                                    })

                                }

                                else if ($submit_button.hasClass(unsubscribeSubmitButtonClass)) {
                                    //alert("registration_event_id: ", registration_event_id)


                                    // ======================================================
                                    // ------------------------------------------------------
                                    // saved for history
                                    // ------------------------------------------------------
                                    // ======================================================

//                            var $matched_events = $('.'+eventCollectionItemClass+'[data-event-id='+popup_event_id+']')
//                            var matched_events_count = $matched_events.length
//
//                            var subscribe_button_url = data['subscribe_button_link']
//                            var subscribe_button_text = data['subscribe_button_text']
//
//                            for(var k = 0; k< matched_events_count; k++ ){
//                                var $event = $matched_events.eq(k)
//                                var $register_button = $event.find('div.register-button')
//                                var $register_button_link = $register_button.find('a.register-button-a')
//
//                                $register_button_link.attr('href', subscribe_button_url)
//                                //alert('hello')
//                                $register_button.manipulateClasses([], ['decline'])
//                                var $registration_text_tag = $register_button.find('.registration-text')
//
//                                $registration_text_tag.text(subscribe_button_text)
//                            }

                                    // ======================================================
                                    // ------------------------------------------------------
                                    // saved for history end
                                    // ------------------------------------------------------
                                    // ======================================================


                                    changeRegistrationButtonForEvents({
                                        registered: true,
                                        button_text: data['subscribe_button_text'],
                                        events: [{
                                            event_id: popup_event_id,
                                            decline_button_link: data['subscribe_button_link']
                                        }]
                                    })
                                    popup_event_id = false
                                }


                                if (default_handler) {
                                    //alert('ok2')
                                    if (Object.keys(errors).length == 0) {
                                        console.log('errors: ', errors)
                                        $popup.removeClass(modalOpenClass)
                                        remove_with_delay($popup)
                                        $html_source.addClass(modalOpenClass)
                                        $popup.init_form()
                                        $modal_windows_wrapper.append($html_source)

                                    }
                                    else {

                                    }
                                }

                                // ======================================================
                                // ------------------------------------------------------
                                // after default handler
                                // ------------------------------------------------------
                                // ======================================================
                                if ($submit_button.hasClass('login')) {
                                    var $devise_event_subscriptions_form_wrap = $html_source.find('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                                    if ($devise_event_subscriptions_form_wrap.length > 0) {
                                        $form.addClass(modeViewClass)
                                        var $empty_fields = $devise_event_subscriptions_form_wrap.find('.input.empty')
                                        $empty_fields.first().find('input').first().focus()
                                    }
                                }


                            }
                            else {

                                if ($submit_button.hasClass('login')) {
                                    var error_keys = Object.keys(errors)
                                    var error_keys_length = error_keys.length
                                    if (error_keys_length > 0) {
                                        $errors.children().remove()
                                        for (var j = 0; j < error_keys_length; j++) {
                                            var error_key = error_keys[j]
                                            var error_text = errors[error_key]
                                            var $error_container = $(['<div class="error">', error_text, '</div>'].join(''))
                                            $errors.append($error_container)
                                        }
                                    }
                                    else {

                                    }
                                }

                                else if ($submit_button.hasClass(sendMePasswordSubmitButtonClass)) {
                                    var $error_container = $(['<div class="error">', data, '</div>'].join(''))

                                    $errors.html($error_container)
                                }


                            }
                        }
                    })
                }
                //
            }
            else if ($this.hasClass(popupLinkClass)) {
                //alert('hello')
                event.preventDefault()
                var $popup_link = $this
                var url = $popup_link.attr('href')
                $.ajax({
                    type: 'get',
                    url: url,
                    data: 'modal=true',
                    dataType: 'text',
                    complete: function (jqXHR, textStatus) {
                        var response_text = jqXHR.responseText
                        var data, $html_source;
                        try {
                            data = $.parseJSON(response_text)
                            $html_source = $(data['html'])
                        }
                        catch (err) {
                            data = {}
                            $html_source = $.parseHTML(response_text)
                            $html_source = $($html_source)
                            //alert($html_source.attr('class'))

                        }

                        HTML_SOURCE = $html_source

                        //alert(textStatus)
                        if (textStatus == 'success') {
                            //var $html_source = $(data['html'])
                            var $modal = $html_source
                            $modal.addClass(modalOpenClass)
                            $popup.removeClass(modalOpenClass)
                            PUBLIC_MODAL = $modal
                            //alert('hello')
                            remove_with_delay($popup)

                            $modal_windows_wrapper.append($modal)

                            $modal.init_form()
                        }
                        else if ($html_source) {
                            var $modal = $html_source
                            $modal.addClass(modalOpenClass)
                            $popup.removeClass(modalOpenClass)
                            PUBLIC_MODAL = $modal
                            //alert('hello')
                            remove_with_delay($popup)

                            $modal_windows_wrapper.append($modal)

                            $modal.init_form()
                        }
                    }

                })
            }
        }
    }
})

//if($html.hasClass('controller-home action-index')){
    $home_featured_event_info_slides_row_ul = $('#home-featured-event-info-slides-row-ul')
    var $event_collections = $('.events-collection, #event-item-page-event-info-part-details')

    $event_collections.on('click', 'a.register-button-a', function(event){
        event.preventDefault()
        var $link = $(this)
        var url = $link.attr('href')
        var $event = $link.closest('.'+eventCollectionItemClass)
        var event_id = + $event.attr('data-event-id')
        $.ajax({
            type: 'GET',
            url: url,
            dataType: 'json',
            data: 'modal=true',
            complete: function(jqXHR, textStatus){
                // ================================================
                // ------------------------------------------------
                // initialize data
                // ------------------------------------------------
                // ================================================
                var response_text = jqXHR.responseText
                var data, $html_source;

                try {
                    data = $.parseJSON(response_text)
                    $html_source = $(data['html'])
                }
                catch(err){
                    data = {}
                    $html_source = $.parseHTML(response_text)
                    $html_source = $($html_source)
                    //alert($html_source.attr('class'))

                }

                //console.log('before parse json. response_text: ')
                //var data = {}
                //if(typeof response_text == 'string' && response_text.length > 0){
                //    data = $.parseJSON(response_text)
                //}

                //console.log('after parse json')


                //console.log('data: ', data)

                var errors = {}
                if(data.hasOwnProperty('errors')){
                    errors = data['errors']
                }

                if(data.hasOwnProperty('error')){
                    errors['form'] = data['error']
                }

                DATA = data

                //var html_source = ""
                //var $html_source
                //if(data.hasOwnProperty('html')){
                //    html_source = data['html']
                //    $html_source = $(html_source)

                //}



                //if(textStatus == 'success') {
                if($html_source){

                    if(data['controller'] == 'users/event_subscriptions' && data['action'] == 'new'){
                        event_register_request = true
                    }
                    console.log('success')
                    console.log('before $modal')
                    var $modal = $html_source
                    console.log('after $modal')
                    $modal.addClass(modalOpenClass)
                    $modal_windows_wrapper.append($modal)
                    registration_location = window.location.pathname
                    registration_event_id = event_id
                    popup_event_id = event_id

                    var $devise_event_subscriptions_form_wrap = $html_source.find('#devise_event_subscriptions-new-get-form-wrap.devise-form-wrap')
                    var $form = $devise_event_subscriptions_form_wrap.find('form')
                    if($devise_event_subscriptions_form_wrap.length > 0){
                        $form.addClass(modeViewClass)
                        var $empty_fields = $devise_event_subscriptions_form_wrap.find('.input.empty')
                        $empty_fields.first().find('input').first().focus()
                    }

                    $modal.init_form()
                }

                else{
                    console.log('error')
                    console.log('text_status: ', textStatus)
                }
            }
        })
    })
//}

//$('.events-collection').on('click', 'a.register-button-a', function(){
//    var $this = $(this)
//
//    if($this.hasClass('register-button-a')){
//        //if('')
//    }
//})



var $infinity_scroll_list= $('.infinity-scroll-list')
var infinity_scroll_list_count = $infinity_scroll_list.length
var load_started = false

if(infinity_scroll_list_count > 0) {
    var current_pagination_page = 1
    var max_pagination_page = +$('.pagination a:not(.next_page):last').text()
    if(max_pagination_page > current_pagination_page) {
        var url = window.location.pathname

        $window.on('scroll', function (event) {

            if(!load_started && current_pagination_page < max_pagination_page && nearBottomOfPage()) {
                load_started = true
                var required_page = current_pagination_page + 1
                current_pagination_page++

                $.ajax({
                    url: url,
                    type: 'get',
                    data: 'ajax=true&page=' + required_page,
                    dataType: 'json',
                    complete: function (jqXHR, textStatus) {
                        var response_text = jqXHR.responseText
                        var data = $.parseJSON(response_text)
                        var html_source = data['html']
                        //var $html_source
                        if(textStatus == 'success'){
                            var $html_source = $(html_source)
                            var $event_list_expired_image_carousels = $html_source.find('.'+event_list_item_images_carousel_class)
                            $event_list_expired_image_carousels.init_images_carousel()
                            //alert($event_list_expired_image_carousels.length)
                            $infinity_scroll_list.append($html_source)
                        }
                        load_started = false


                    }
                })
            }
        })
    }
}

function changeRegistrationButtonForEvents(options){
    var defaults = { registered: true, decline_button_link: false, button_text: false, events: [] }
    options = Object.merge(defaults, options )
    var events_count = options.events.length
    if( options.button_text && events_count > 0){
        var event_selector_array = []
        var event_selector_string;
        for(var i=0; i< events_count; i++){
            var event_info = options.events[i]
            var event_id = event_info['event_id']
            event_selector_array[i] = '[data-event-id='+event_id+']'
        }
        event_selector_string = event_selector_array.join(',')

        var $all_events
        //if(!options.registered){
        $all_events = $('.'+eventCollectionItemClass)
        //}
        //else{
        //    $all_events = $('.'+eventCollectionItemClass)
        //}

        var $matched_events = $all_events.filter(event_selector_string)
        console.log('options.registered', options.registered)
        if(options.registered){
           $matched_events.manipulateClasses([eventIAmSubscribedOnClass], [])
        }
        else{
            $matched_events.manipulateClasses([], [eventIAmSubscribedOnClass])
        }

        console.log('event_selector_string: ', event_selector_string)

        console.log('matched_events_count', $matched_events.length)
        var matched_events_count = $matched_events.length
        for(var k = 0; k< matched_events_count; k++ ){
            var event_info = options.events[k]
            var event_button_url = ''
            if(options.registered){
                event_button_url = event_info['decline_button_link']
            }
            else{
                event_button_url = event_info['subscribe_button_link']
            }
            var $event = $matched_events.eq(k)
            var $register_button = $event.find('div.register-button')
            var $register_button_link = $register_button.find('a.register-button-a')
            //var decline_button_url = data['decline_button_link']
            $register_button_link.attr('href', event_button_url)
            //alert('hello')
            if(options.registered){
                $register_button.manipulateClasses(['decline'],[])
            }
            else{
                $register_button.manipulateClasses([], ['decline'])
            }

            var $registration_text_tag = $register_button.find('.registration-text')

            console.log('$registration_text_tag: ', $registration_text_tag)
            console.log('button_text: ', options.button_text)

            public_registration_text_tag = $registration_text_tag

            $registration_text_tag.text(options.button_text)
            //alert("test")
        }
    }

}

function nearBottomOfPage() {
    return scrollDistanceFromBottom() < 150;
}

function scrollDistanceFromBottom(argument) {
    return pageHeight() - (window.pageYOffset + self.innerHeight);
}

function pageHeight() {
    return Math.max(document.body.scrollHeight, document.body.offsetHeight);
}



// ======================================================
// ------------------------------------------------------
// home page featured events carousel
// ------------------------------------------------------
// ======================================================

//$home_featured_events_section = $('#home-featured-events-section')
//$home_featured_events_section.on('click', '.nav-arrow', function(){
//    var $this = $(this)
//
//})

//$(window.location).change(function(){
//    //execute code
//    alert('hello')
//});
//
//$(window).unload(
//        function(event) {
//            alert("navigating");
//        }
//);
//
//window.onbeforeunload=function(){
//    //displayMessage();
//    alert('displayMessage')
//
//    setTimeout(function(){alert(window.location.href)},document.readyState?10:5000);
//};

window.onbeforeunload = function(e) {
    //console.log('window.onbeforeunload:\n'+window.location.href);

    var current_path = window.location.pathname
    var dashboard = current_path.match(/^(\/[a-z]{2})?\/my/gi) != null
    if(!dashboard){
        //if(page_before_dashboard){
            //window.location = page_before_dashboard
            //document.cookie = JSON.stringify({page_before_dashboard: window.location.pathname})
            document.cookie = ['page_before_dashboard', window.location.pathname].join('=')
        //}
        //else{
        //    window.location = "/"

        //}

    }

};

//window.onload = function(e){
//    console.log('window.onloadstart:\n'+window.location.href)
//}

last_timeout_id = false
function AddHoverToEvent($event){
    $event.addClass('hover-delay-end')
}
var mouse_in_event = 'mouseover'
mouse_in_event = 'mouseenter'
var mouse_out_event = 'mouseout'
mouse_out_event = 'mouseleave'
$('#events-list').on([mouse_out_event, mouse_in_event].join(' '), 'div.events-list-event, div.articles-list-article', function(event){
    var $event = $(this)
    //var event_mouse_over_data = $event.data('mouse_over')
    if(event.type == mouse_out_event) {
        if (last_timeout_id) {
            console.log(mouse_out_event+': event_id: ', $event.attr('data-event-id'))
            clearTimeout(last_timeout_id)
            $event.removeClass('hover-delay-end')
        }
    }
    else if(event.type == mouse_in_event){
        last_timeout_id = setTimeout(function(){
            console.log(mouse_in_event+': event_id: ', $event.attr('data-event-id'))
            $event.addClass('hover-delay-end')
        }, 800)
    }
})


function hideMenu(){
    $('#menu-focus-flag:checked').prop('checked', false)
}

$window.on('scroll', hideMenu)
$wrap.on('click', hideMenu)

var $fixed_header_top_container = $('#fixed-header-top-container')
var fixed_header_top_container_visible_class = 'visible'
//$window.on('scroll', function(e){
//    console.log('scroll: ', e)
//})

$window.on('mousewheel', function(e){

    var scroll_up = e.originalEvent.wheelDelta /120 > 0
    var scroll_down = !scroll_up
    if(scroll_up) {
        //console.log('scrolling up !');
        $fixed_header_top_container.addClass(fixed_header_top_container_visible_class)
    }
    else{
        $fixed_header_top_container.removeClass(fixed_header_top_container_visible_class)
    }
})