$header_menu_user_wrapper = $('#header-menu-user-wrapper')
logged_in = $html.hasClass('logged_in')

$modal_windows_wrapper = $("#modal-windows-wrapper")

modalOpenClass = 'modal-open'
modalCloseTriggerClass = 'modal-close-trigger'

submitButtonClass = 'input-submit'

loginLinkClass = 'login'
logoutLinkClass = 'logout'

popupLinkClass = 'popup-link'

$login_link = $('#header-menu-user-wrapper a.popup-link.login')

registration_location = false
registration_event_id = false

delay_before_remove_popup = 2000

submitButtonProgressClass = 'progress-bar-moving-bg'

sendMePasswordSubmitButtonClass = 'send-me-password-submit-button'
signUpSubmitButtonClass = 'sign-up-submit-button'
signInSubmitButtonClass = 'sign-in-submit-button'
resendMeConfirmationSubmitButtonClass = 'resend-me-confirmation-submit-button'
unlockMeSubmitButtonClass = 'unlock-me-submit-button'

logoutSubmitButtonClass = 'logout-submit-button'

subscribeSubmitButtonClass = 'subscribe-submit-button'
unsubscribeSubmitButtonClass = 'unsubscribe-submit-button'

eventCollectionItemClass = 'event-collection-item'

infinityScrollListClass = 'infinity-scroll-list'

event_register_request = false

popup_event_id = false

eventIAmSubscribedOnClass = 'event-i-am-subscribed-on'



<%
    def path( name, options = {} )
        Rails.application.routes.url_helpers.send("#{name}_path", options)
    end

    def js_path( name, options = {} )
        "\"#{path(name, options)}\""
    end

    def routes
        Rails.application.routes.url_helpers
    end
%>

config = {
    routes: {
        new_user_session: <%= js_path(:new_user_session, locale: I18n.locale) %>,
        edit_user_registration: <%= js_path(:edit_user_registration, locale: I18n.locale) %>,
        my_events: <%= js_path(:root, locale: I18n.locale) %>,
        user_session_destroy_form: <%= js_path(:user_session_destroy_form, locale: I18n.locale) %>

    }
}

function path(name){
    if(config.routes.hasOwnProperty(name)){
        return config.routes[name]
    }
    return false
}

function remove_with_delay(element_to_remove, delay){
    delay = delay || delay_before_remove_popup
    $elem = $(element_to_remove)
    $elem.remove()
//    if($elem.length > 0){
//        setTimeout(function(){
//            $elem.remove()
//        }, delay);
//    }

}

$header_menu_user_wrapper.on('click', '.popup-link', function(event){
    var $link = $(this)
    var url = $link.attr('href')



    if($link.hasClass(loginLinkClass) || !logged_in) {
        //if (!logged_in) {
            event.preventDefault()
            $.ajax({
                dataType: 'html',
                url: path('new_user_session'),
                type: 'GET',
                data: 'modal=true',
                success: function (data) {
                    var $modal = $(data)
                    $modal.addClass(modalOpenClass)
                    $modal_windows_wrapper.append($modal)
                }

            })
        //}
        //else{

        //}
    }
    else{
        event.preventDefault()
        $.ajax({
            dataType: 'html',
            url: path('user_session_destroy_form'),
            type: 'GET',
            data: 'modal=true',
            success: function (data) {
                var $modal = $(data)
                $modal.addClass(modalOpenClass)
                $modal_windows_wrapper.append($modal)
            }

        })
    }


})



$modal_windows_wrapper.on('click', ['label.' + modalCloseTriggerClass, 'input.' + submitButtonClass, 'a.' + popupLinkClass].join(','), function(event){
    var $this = $(this)
    var $popup = $this.closest('.popup')

    if($this.hasClass(modalCloseTriggerClass)){
        $popup.removeClass(modalOpenClass)
        remove_with_delay($popup)

        registration_event_id = false
        registration_location = false
        registration_event_id = false
    }
    else if($this.hasClass(submitButtonClass)){
        event.preventDefault()

        var $submit_button = $this

        var $form = $this.closest('form')
        var $devise_form_wrap = $('.devise-form-wrap')
        var $errors = $devise_form_wrap.find('> div.errors')
        var form_data = $form.serialize()
        var url = $form.attr('action')
        var method = $form.attr('method')

        form_data += "&modal=true"

        if(registration_location) {
            form_data += "&registration_location=" + registration_location
        }

        if(registration_event_id){
            form_data += "&registration_event_id=" + registration_event_id
        }

        if($submit_button.hasClass(signInSubmitButtonClass) || $submit_button.hasClass(logoutSubmitButtonClass)){
            var $events = $('.'+eventCollectionItemClass)
            if($submit_button.hasClass(logoutSubmitButtonClass)){
                $events = $events.filter('.'+eventIAmSubscribedOnClass)
            }
            var events_count = $events.length
            var event_ids = []
            for(var i = 0; i < events_count; i++){
                event_ids[i] = +$events.eq(i).attr('data-event-id')
            }
            form_data += "&loaded_events="+event_ids.join(',')
        }


        valid_form = true

        //if($submit_button.hasClass(signUpSubmitButtonClass)){

        //}
        //else if($submit_button.hasClass(signInSubmitButtonClass)){

        //}
        //else if($submit_button.hasClass())

        valid_form = validateForm($form)


        if(valid_form) {

            $submit_button.addClass(submitButtonProgressClass);

            $.ajax({
                url: url,
                type: method,
                data: form_data,
                dataType: 'json',
                complete: function (jqXHR, textStatus) {
                    //console.log('this:', $this)

                    $submit_button.removeClass(submitButtonProgressClass)
                    var response_text = jqXHR.responseText
                    console.log('before parse json. response_text: ')
                    var data = {}
                    if(typeof response_text == 'string' && response_text.length > 0){
                        data = $.parseJSON(response_text)
                    }

                    console.log('after parse json')


                    console.log('data: ', data)

                    var errors = {}
                    if(data.hasOwnProperty('errors')){
                        errors = data['errors']
                    }

                    if(data.hasOwnProperty('error')){
                        errors['form'] = data['error']
                    }

                    DATA = data

                    var html_source = ""
                    var $html_source
                    if(data.hasOwnProperty('html')){
                        html_source = data['html']
                        $html_source = $(html_source)

                    }


                    //var $data = $(data)

                    var default_handler = true


                    if (textStatus == 'success') {
                        //var $data = $(data)

                        console.log('data: ', data)

                        if ($submit_button.hasClass('login')) {

                            //$popup.removeClass(modalOpenClass)
                            //remove_with_delay($popup)
                            logged_in = true
                            $login_link.attr('href', '/en/my/dashboard')
                            var $header_menu_user_dropdown = $(['<div id="header-menu-user-dropdown">',
                                '<a href="', path('edit_user_registration'), '" class="header-menu-user-dropdown-link">dashboard</a>',
                                '<a href="', path('my_events'), '" class="header-menu-user-dropdown-link">events i am subscribed on</a>',
                                '<a href="', path('user_session_destroy_form'), '" class="popup-link header-menu-user-dropdown-link logout">log out</a>',
                                '</div>'].join(''))

                            $header_menu_user_dropdown.appendTo($header_menu_user_wrapper)

                            //event['events_i_am_subscribed_on']

                            changeRegistrationButtonForEvents({registered: true, button_text: data['decline_button_text'], events: data['events_i_am_subscribed_on'] })

                            //default_handler = false
                        }
                        else if ($submit_button.hasClass('logout')) {
                            $popup.removeClass(modalOpenClass)
                            remove_with_delay($popup)
                            logged_in = false
                            $header_menu_user_wrapper.find('#header-menu-user-dropdown').remove()

                            default_handler = false

                            changeRegistrationButtonForEvents({registered: false, button_text: data['subscribe_button_text'], events: data['events_i_am_subscribed_on'] })
                        }
                        else if($submit_button.hasClass(signUpSubmitButtonClass)){

                            if(errors.hasOwnProperty('email') && errors['email'] == 'Email already taken'){
                                $form.find('div.input.email').manipulateClasses(['error', 'taken'],['valid'])
                                default_handler = false
                            }
                            else{
                                default_handler = true
                                alert('ok')
                            }
                        }

                        else if($submit_button.hasClass(subscribeSubmitButtonClass)){
                            //alert(registration_event_id)
                            // abcdef
                            changeRegistrationButtonForEvents({registered: true, button_text: data['decline_button_text'], events: [{event_id: popup_event_id, decline_button_link: data['decline_button_link']}]})

                        }

                        else if($submit_button.hasClass(unsubscribeSubmitButtonClass)){
                            //alert("registration_event_id: ", registration_event_id)


                            // ======================================================
                            // ------------------------------------------------------
                            // saved for history
                            // ------------------------------------------------------
                            // ======================================================

//                            var $matched_events = $('.'+eventCollectionItemClass+'[data-event-id='+popup_event_id+']')
//                            var matched_events_count = $matched_events.length
//
//                            var subscribe_button_url = data['subscribe_button_link']
//                            var subscribe_button_text = data['subscribe_button_text']
//
//                            for(var k = 0; k< matched_events_count; k++ ){
//                                var $event = $matched_events.eq(k)
//                                var $register_button = $event.find('div.register-button')
//                                var $register_button_link = $register_button.find('a.register-button-a')
//
//                                $register_button_link.attr('href', subscribe_button_url)
//                                //alert('hello')
//                                $register_button.manipulateClasses([], ['decline'])
//                                var $registration_text_tag = $register_button.find('.registration-text')
//
//                                $registration_text_tag.text(subscribe_button_text)
//                            }

                            // ======================================================
                            // ------------------------------------------------------
                            // saved for history end
                            // ------------------------------------------------------
                            // ======================================================


                            changeRegistrationButtonForEvents({registered: true, button_text: data['subscribe_button_text'], events: [{event_id: popup_event_id, decline_button_link: data['subscribe_button_link']}]})
                            popup_event_id = false
                        }

                        if(default_handler){
                            //alert('ok2')
                            if(Object.keys(errors).length == 0) {
                                 console.log('errors: ', errors)
                                $popup.removeClass(modalOpenClass)
                                remove_with_delay($popup)
                                $html_source.addClass(modalOpenClass)
                                $modal_windows_wrapper.append($html_source)
                            }
                            else{

                            }
                        }
                    }
                    else {

                        if ($submit_button.hasClass('login')) {
                            var error_keys = Object.keys(errors)
                            var error_keys_length = error_keys.length
                            if(error_keys_length > 0) {
                                $errors.children().remove()
                                for( var j = 0; j< error_keys_length; j++ ) {
                                    var error_key = error_keys[j]
                                    var error_text = errors[error_key]
                                    var $error_container = $(['<div class="error">',error_text , '</div>'].join(''))
                                    $errors.append($error_container)
                                }
                            }
                            else{

                            }
                        }

                        else if ($submit_button.hasClass(sendMePasswordSubmitButtonClass)) {
                            var $error_container = $(['<div class="error">', data, '</div>'].join(''))

                            $errors.html($error_container)
                        }


                    }
                }
            })
        }
        //
    }
    else if($this.hasClass(popupLinkClass)){
        //alert('hello')
        event.preventDefault()
        var $popup_link = $this
        var url = $popup_link.attr('href')
        $.ajax({
            type: 'get',
            url: url,
            data: 'modal=true',
            dataType: 'text',
            complete: function(jqXHR, textStatus){
                var response_text = jqXHR.responseText
                var data, $html_source;
                try {
                    data = $.parseJSON(response_text)
                    $html_source = $(data['html'])
                }
                catch(err){
                    data = {}
                    $html_source = $.parseHTML(response_text)
                    $html_source = $($html_source)
                    alert($html_source.attr('class'))

                }

                //alert(textStatus)
                if(textStatus == 'success') {
                    //var $html_source = $(data['html'])
                    var $modal = $html_source
                    $modal.addClass(modalOpenClass)
                    $popup.removeClass(modalOpenClass)
                    PUBLIC_MODAL = $modal
                    //alert('hello')
                    remove_with_delay($popup)

                    $modal_windows_wrapper.append($modal)
                }
            }
        })
    }


})

//if($html.hasClass('controller-home action-index')){
    $home_featured_event_info_slides_row_ul = $('#home-featured-event-info-slides-row-ul')
    var $event_collections = $('.events-collection, #event-item-page-event-info-part-details')

    $event_collections.on('click', 'a.register-button-a', function(event){
        event.preventDefault()
        var $link = $(this)
        var url = $link.attr('href')
        var $event = $link.closest('.'+eventCollectionItemClass)
        var event_id = + $event.attr('data-event-id')
        $.ajax({
            type: 'GET',
            url: url,
            dataType: 'json',
            data: 'modal=true',
            complete: function(jqXHR, textStatus){
                // ================================================
                // ------------------------------------------------
                // initialize data
                // ------------------------------------------------
                // ================================================
                var response_text = jqXHR.responseText
                console.log('before parse json. response_text: ')
                var data = {}
                if(typeof response_text == 'string' && response_text.length > 0){
                    data = $.parseJSON(response_text)
                }

                console.log('after parse json')


                console.log('data: ', data)

                var errors = {}
                if(data.hasOwnProperty('errors')){
                    errors = data['errors']
                }

                if(data.hasOwnProperty('error')){
                    errors['form'] = data['error']
                }

                DATA = data

                var html_source = ""
                var $html_source
                if(data.hasOwnProperty('html')){
                    html_source = data['html']
                    $html_source = $(html_source)

                }

                if(textStatus == 'success') {

                    if(data['controller'] == 'users/event_subscriptions' && data['action'] == 'new'){
                        event_register_request = true
                    }
                    console.log('success')
                    console.log('before $modal')
                    var $modal = $html_source
                    console.log('after $modal')
                    $modal.addClass(modalOpenClass)
                    $modal_windows_wrapper.append($modal)
                    registration_location = window.location.pathname
                    registration_event_id = event_id
                    popup_event_id = event_id
                }
                else{
                    console.log('error')
                }
            }
        })
    })
//}

//$('.events-collection').on('click', 'a.register-button-a', function(){
//    var $this = $(this)
//
//    if($this.hasClass('register-button-a')){
//        //if('')
//    }
//})



var $infinity_scroll_list= $('.infinity-scroll-list')
var infinity_scroll_list_count = $infinity_scroll_list.length
var load_started = false

if(infinity_scroll_list_count > 0) {
    var current_pagination_page = 1
    var max_pagination_page = +$('.pagination a:not(.next_page):last').text()
    if(max_pagination_page > current_pagination_page) {
        var url = window.location.pathname

        $window.on('scroll', function (event) {

            if(!load_started && current_pagination_page < max_pagination_page && nearBottomOfPage()) {
                load_started = true
                var required_page = current_pagination_page + 1
                current_pagination_page++

                $.ajax({
                    url: url,
                    type: 'get',
                    data: 'ajax=true&page=' + required_page,
                    dataType: 'json',
                    complete: function (jqXHR, textStatus) {
                        var response_text = jqXHR.responseText
                        var data = $.parseJSON(response_text)
                        var html_source = data['html']
                        //var $html_source
                        if(textStatus == 'success'){
                            $infinity_scroll_list.append(html_source)
                        }
                        load_started = false
                    }
                })
            }
        })
    }
}

function changeRegistrationButtonForEvents(options){
    var defaults = { registered: true, decline_button_link: false, button_text: false, events: [] }
    options = Object.merge(defaults, options )
    var events_count = options.events.length
    if( options.button_text && events_count > 0){
        var event_selector_array = []
        var event_selector_string;
        for(var i=0; i< events_count; i++){
            var event_info = options.events[i]
            var event_id = event_info['event_id']
            event_selector_array[i] = '[data-event-id='+event_id+']'
        }
        event_selector_string = event_selector_array.join(',')

        var $all_events
        //if(!options.registered){
        $all_events = $('.'+eventCollectionItemClass)
        //}
        //else{
        //    $all_events = $('.'+eventCollectionItemClass)
        //}

        var $matched_events = $all_events.filter(event_selector_string)

        if(options.registered){
           $matched_events.manipulateClasses([eventIAmSubscribedOnClass], [])
        }
        else{
            $matched_events.manipulateClasses([], [eventIAmSubscribedOnClass])
        }

        console.log('matched_events_count', $matched_events.length)
        var matched_events_count = $matched_events.length
        for(var k = 0; k< matched_events_count; k++ ){
            var event_info = options.events[k]
            var event_button_url = ''
            if(options.registered){
                event_button_url = event_info['decline_button_link']
            }
            else{
                event_button_url = event_info['subscribe_button_link']
            }
            var $event = $matched_events.eq(k)
            var $register_button = $event.find('div.register-button')
            var $register_button_link = $register_button.find('a.register-button-a')
            //var decline_button_url = data['decline_button_link']
            $register_button_link.attr('href', event_button_url)
            //alert('hello')
            if(options.registered){
                $register_button.manipulateClasses(['decline'],[])
            }
            else{
                $register_button.manipulateClasses([], ['decline'])
            }

            var $registration_text_tag = $register_button.find('.registration-text')

            $registration_text_tag.text(options.button_text)
        }
    }

}

function nearBottomOfPage() {
    return scrollDistanceFromBottom() < 150;
}

function scrollDistanceFromBottom(argument) {
    return pageHeight() - (window.pageYOffset + self.innerHeight);
}

function pageHeight() {
    return Math.max(document.body.scrollHeight, document.body.offsetHeight);
}