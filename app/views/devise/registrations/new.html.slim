#devise-content
  #devise_sessions-new-get-form-wrap.devise-form-wrap
    .form-title
      = t('devise.registrations.header')

    .errors

    = simple_form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f|
      .errors
        /= f.inspect
      = f.error_notification
      .form-inputs
        = f.input :first_name, required: true, auto_focus: true, label: false, placeholder: "#{t('devise.registrations.placeholders.first_name')}*", wrapper_html: { data: { validate: 'first_name required' } }
        label for="#{resource_name}_first_name" data-error-too-short=t("activerecord.errors.models.user.attributes.first_name.too_short") data-error-empty=t("activerecord.errors.models.user.attributes.first_name.empty")
        = f.input :last_name, label: false, required: true, placeholder: "#{t('devise.registrations.placeholders.last_name')}*", wrapper_html: { data: { validate: 'last_name required' } }
        label for="#{resource_name}_last_name" data-error-too-short=t("activerecord.errors.models.user.attributes.last_name.too_short") data-error-empty=t("activerecord.errors.models.user.attributes.last_name.empty")
        = f.input :email, required: true, label: false, placeholder: "#{t('devise.registrations.placeholders.email')}*", wrapper_html: { data: { validate: 'email required',  :"error-taken" => t('activerecord.errors.models.user.attributes.email.taken'), :"error-empty" => t('activerecord.errors.models.user.attributes.email.empty'), :"error-invalid" => t('activerecord.errors.models.user.attributes.email.invalid') , help: t('activerecord.help.models.user.attributes.email') } }
        label for="#{resource_name}_email" data-error-too-short=t("activerecord.errors.models.user.attributes.last_name.too_short") data-error-empty=t("activerecord.errors.models.user.attributes.last_name.empty")
        = f.input :contact_phone, required: true, label: false, placeholder: "#{t('devise.registrations.placeholders.contact_phone')}*", wrapper_html: { data: { validate: 'phone required' }, class: 'phone' }
        = f.input :password, required: true, label: false, placeholder: "#{t('devise.registrations.placeholders.password')}*", hint: ("#{@minimum_password_length} символів мінімум" if @validatable), wrapper_html: { data: { validate: 'password required' } }
        = f.input :password_confirmation, label: false, required: true, placeholder: "#{t('devise.registrations.placeholders.password_confirmation')}*", wrapper_html: { data: { validate: 'password_confirmation required' } }
        /= f.input :city, label: false, placeholder: t('devise.registrations.placeholders.city'), wrapper_html: { data: { validate: 'city' } }
        /= f.input :company, label: false, placeholder: t('devise.registrations.placeholders.company'), wrapper_html: { data: { validate: 'company' } }
        /= f.input :status, label: false, placeholder: t('devise.registrations.placeholders.status'), wrapper_html: { data: { validate: 'status' } }
        /= f.input :description, label: false, placeholder: t('devise.registrations.placeholders.description'), wrapper_html: { data: { validate: 'description' } }
        /= recaptcha_tags display: { lang: I18n.locale }
        span.starred-fields-required
          = t("starred-fields-required")
      .form-actions


        = f.button :submit, t('devise.registrations.create_button'), class: 'input-submit sign-up-submit-button devise-submit-button orange-bg', value: "Створити аккаунт"
        //span.progress-bar
          span.progress-bar-moving-bg
    / render "devise/shared/links"
    /.shared-links
      - if controller_name != 'sessions'
        = link_to t('shared.links.sign_in'), new_session_path(resource_name), class: 'popup-link link-to-input', data: { input: '#devise_sessions-new-get-flag' }

      - if devise_mapping.confirmable? && controller_name != 'confirmations'
        = link_to t('shared.links.confirmations'), new_confirmation_path(resource_name), class: 'popup-link link-to-input', data: { input: '#devise_confirmations-new-get-flag' }

      - if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks'
        = link_to t('shared.links.unlocks'), new_unlock_path(resource_name), class: 'popup-link link-to-input', data: { input: '#devise_unlocks-new-get-flag' }
